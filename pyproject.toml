[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 66.0.1", "wheel"]

[project]
authors = [{ name = "Zetta AI Team", email = "sergiy@zetta.ai" }]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "attrs >= 23.2.0",
  "typeguard == 4.1.5",
  "cachetools >= 5.2.0",
  "fsspec >= 2022.8.2",
  "rich >= 12.6.0",
  "python-logging-loki >= 0.3.1",
  "neuroglancer >= 2.32",
  "dill >= 0.3.6",
  "pyyaml ~= 6.0.1",
  "requests ~= 2.31.0",
  "requests-oauthlib ~= 1.3",
  "cloud-files >= 4.24.0",
  "packaging >= 23.2",
  "pdbp >= 1.5.3",
  "boto3 ~= 1.28",
  "slack_sdk >= 3.31.0",
  "tabulate >= 0.9.0",
  "types-tabulate >= 0.1.0",
]
description = "Zetta AI Connectomics Toolkit"
keywords = ["neuroscience connectomics EM"]
license = { text = "MIT" }
name = "zetta_utils"
readme = "README.md"
requires-python = ">3.10,<3.13"
urls = { Homepage = "https://github.com/zettaai/zetta_utils" }
version = "0.0.2"

[project.optional-dependencies]
alignment = [
  "opencv-python-headless >= 4.5.5",
  "metroem @ git+https://github.com/ZettaAI/metroem.git",
  "torch >= 2.0",
]
all-cpu = ["zetta_utils[modules,docs,test]"]
all = ["zetta_utils[all_cpu,gpu]"]
augmentations = [
  "zetta_utils[tensor_ops]",
  "imaug @ git+https://github.com/imaug/imaug.git",  # not a typo, fork of imgaug
  "imagecorruptions >= 1.1.2",
  "torchvision",
]
cli = ["click == 8.0.1"]
cloudvol = ["cloud-volume[all_codecs] ~= 12.1.0", "zetta_utils[tensor_ops]"]
tensorstore = [
  "boto3 ~= 1.28",
  "tensorstore >= 0.1.73",
  "zetta_utils[tensor_ops]",
]
convnet = ["torch >= 2.0", "artificery >= 0.0.3.3", "onnx2torch"]
databackends = ["google-cloud-datastore", "google-cloud-firestore"]
docs = [
  "piccolo_theme >= 0.11.1",
  "sphinx ~= 6.2.1",  # can unpin this when awscli removes their docutils dependency
  "sphinx-autodoc-typehints >= 1.23.0",
  "sphinx-notfound-page >= 1.1.0",
  "sphinx_copybutton >= 0.5.2",
  "sphinx_tabs >= 3.4.5",
  "sphinx-prompt >= 1.5.0",
  "sphinx_toolbox >= 3.9.0",
  "sphinxcontrib-applehelp >= 1.0.4",
  "sphinxcontrib-devhelp >= 1.0.2",
  "sphinxcontrib-htmlhelp >= 2.0.1",
  "sphinxcontrib-qthelp >= 1.0.3",
  "sphinxcontrib-serializinghtml >= 1.1.5",
  "pdbp >= 1.5.3",
]
gcfs-exceptions = [
  "gcsfs >= 2023.3.0",
  "aiohttp >= 3.8.4",
  "google-auth >= 2.17.1",
  "requests >= 2.28.1",
]
gcs = ["gcsfs >= 2022.7.1"]
mazepa = [
  "zetta_utils[gcfs-exceptions]", # Exceptions used by gcfs.retry
  "tenacity == 8.1.0",            # 8.2 didn't type `retry` properly -- expects no args
  "pebble >= 5.0.3",
  "chardet == 5.0.0",
  "coolname >= 1.1.0",
  "task-queue >= 2.12.0",
  "boto3 ~= 1.28",
  "xxhash ~= 3.2.0",
]
mazepa-addons = [
  "zetta_utils[mazepa]",
  "kubernetes >= 25.3.0",
  "awscli ~= 1.29",
  "google-cloud-container",
  "google-api-python-client",
  "google-cloud-compute",
]
meshing = [
  "zetta_utils[cloudvol, databackends, mazepa]",
  "mapbuffer >= 0.7.2",
  "pyfqmr >= 0.2.0",
  "shard-computer >= 1.1.1",
  "trimesh >= 4.4.0",
  "zmesh >= 1.7.1",
]
task_management = ["zetta_utils[databackends]", "tenacity"]
modules = [
  # put them in order of dependencies
  "zetta_utils[tensor_ops, viz, cli, gcs, slurm, sql]",
  "zetta_utils[cloudvol,tensorstore,alignment]",
  "zetta_utils[training,mazepa]",
  "zetta_utils[mazepa_addons]",
  "zetta_utils[databackends]",
  "zetta_utils[task_management]",
  "zetta_utils[montaging]",
  "zetta_utils[segmentation]",
  "zetta_utils[meshing]",
  "zetta_utils[skeletonization]",
]
montaging = ["zetta_utils[cloudvol, databackends, mazepa]", "torch >= 2.0"]
pcg = [
  "click >= 8.0",
  "protobuf>=4.22.0",
  "requests>=2.25.0",
  "grpcio>=1.36.1",
  "numpy>=2.2.5",  # reinstall avoids "Core dumped" for tensorstore and neuroglancer?!
  "pandas",
  "networkx>=2.1",
  "google-cloud-bigtable>=0.33.0",
  "google-cloud-datastore>=1.8",
  "flask",
  "flask_cors",
  "python-json-logger",
  "redis",
  "rq < 2",
  "pyyaml",
  "cachetools",
  "werkzeug",
  "cloud-files>=4.21.1",
  "cloud-volume>=8.26.0",
  "multiwrapper",
  "middle-auth-client>=3.11.0",
  "zmesh>=1.7.0",
  "fastremap>=1.14.0",
  "task-queue>=2.13.0",
  "messagingclient",
  "dracopy>=1.3.0",
  "datastoreflex>=0.5.0",
  "zstandard==0.21.0",
]
public = [
  # put them in order of dependencies
  "zetta_utils[tensor_ops, viz, cli, gcs, slurm]",
  "zetta_utils[cloudvol]",
  "zetta_utils[training,mazepa]",
  "zetta_utils[mazepa_addons]",
  "zetta_utils[databackends]",
]
segmentation = [
  "zetta_utils[tensor_ops]",
  "onnx >= 1.13.0",
  "onnx2torch",
  "scikit-learn >= 1.2.2",
  "networkx",
  "lsds @ git+https://github.com/ZettaAI/lsd.git@cebe976",
  "abiss @ git+https://github.com/ZettaAI/abiss.git@1d1fc27",
  "waterz @ git+https://github.com/ZettaAI/waterz.git@0bac4be",
]
gpu = []
skeletonization = [
  "zetta_utils[cloudvol, databackends, mazepa]",
  "mapbuffer >= 0.7.2",
  "shard-computer >= 1.1.1",
  "kimimaro>=4.0.2",
  "scikit-learn >= 1.2.2",
]
slurm = ["simple_slurm"]
sql = ["SQLAlchemy >= 2.0.36"]
tensor-ops = [
  "zetta_utils[tensor_typing]",
  "tinybrain >= 1.7.0",
  "affine >= 2.3.1",
  "connected-components-3d >= 3.10.0",
  "fastremap >= 1.12.2",
  "einops >= 0.4.1",
  "torchfields >= 0.1.2",
  "kornia >= 0.6.12",
]

tensor-typing = [
  "torch >= 2.0",
  "numpy",
]

test = [
  "zetta_utils[types]",
  "docker ~= 6.0",
  "black == 25.1.0",
  "click == 8.0.1",
  "pydocstyle == 6.1.1",
  "flake8 == 4.0.1",
  "mypy == 1.10.1",
  "mypy-extensions == 1.0.0",
  "pytest == 7.1.1",
  "pytest-cov == 3.0.0",
  "coverage == 6.5.0",
  "pytest-mock == 3.8.2",
  "pylint == 3.1.0",
  "isort == 5.10.1",
  "pre-commit == 2.19.0",
  "moto == 4.1.0",
]
training = [
  "zetta_utils[tensor_ops,cloudvol,convnet,viz,gcs,augmentations]",
  "torch >= 2.0",
  "lightning[pytorch] ~= 2.2",
  "torchmetrics == 0.11.4",
  "wandb >= 0.13.1",
  "kubernetes",
  "onnx >= 1.13.0",
  "zetta_utils[mazepa]",
]
types = [
  "types-Pillow == 9.3.0.1",
  "types-cachetools == 5.2.1",
  "types-requests == 2.28.11.7",
  "types-PyYAML == 6.0.12.12",
]
viz = [
  "zetta_utils[tensor_ops]",
  "matplotlib >= 3.5.2",
  "ipywidgets >= 7.7.0",
  "opencv-python-headless >= 4.5.5",
]

[project.scripts]
zetta = "zetta_utils.cli.main:cli"

[tool.setuptools]
py-modules = ["zetta_utils"]

[tool.black]
line-length = 99
target-version = ["py39"]

[tool.pylint.format]
max-line-length = 99
max-locals = 25

[tool.pylint.basic]
additional-builtins = '''reveal_type'''
good-names = '''sm,lr,ts,df,e,i,j,k,id,logger,n,on,tz,x,y,z,r,ex,ey,cv,s,f,v,a,b,mu,fn,fp,op,q,cf,tb,dx,dy,dz'''
[tool.pylint.message_control]
disable = '''duplicate-code,C0103,cyclic-import,too-many-arguments,missing-docstring,too-few-public-methods,logging-fstring-interpolation,logging-not-lazy,not-callable,no-member,unsubscriptable-object,pointless-string-statement,wrong-import-order,not-an-iterable,no-else-return,unsupported-membership-test,abstract-class-instantiated,unpacking-non-sequence,no-self-use'''
extension-pkg-allow-list = ["pymssql._mssql", "abiss"]

[tool.pylint.miscellaneous]
notes = '''FIXME,XXX'''

[tool.pylint.similarities]
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 4

[tool.pylint.main]
extension-pkg-whitelist = "numpy,cc3d,fastremap"
ignore-paths = ["^docs/*", "^scripts/*", "^specs/*"]
load-plugins = "pylint.extensions.no_self_use"

[tool.pylint.options]
generated-members = "torch.*"

[tool.pytest.ini_options]
addopts = "-ra --cov=zetta_utils --cov-report=term-missing --strict-markers --ignore=.eggs --tb=short --junitxml=test-results.xml --cov-report=html --cov-report=xml"
norecursedirs = ".env .git .venv build dist "
python_files = "test.py tests.py test_*.py *_test.py"
testpaths = ["tests", "zetta_utils/alignment"]

[tool.mypy]
exclude = "^(?!zetta_utils/|tests/|scripts/).*"
check_untyped_defs = true
ignore_missing_imports = true
implicit_reexport = true
no_implicit_optional = true
plugins = "./mypy_plugin.py"
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.isort]
known_third_party = "wandb"
profile = "black"
skip = ["__init__.py", "specs"]
